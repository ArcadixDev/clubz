// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  phone         String?   @unique
  emailVerified DateTime?
  role          String?
  password      String?
  image         String?
  pincode       String?
  city          String?
  state         String?
  accounts      Account[]
  sessions      Session[]
  tickets       Ticket[]
  reviews       Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Club {
  id               String   @id @default(cuid())
  name             String   @unique
  description      String?
  websiteUrl       String?
  uniqueUrl			String?
  phone            String?  @unique
  availableTickets Int?
  minAge 			Int?
  ticketPrice      Float?
  openingHours     Json?    @db.Json
  location         Json?    @db.Json
  images           String[] @db.VarChar(255)
  tickets          Ticket[]
  reviews          Review[]
}

model Ticket {
  id            String   @id @default(cuid())
  clubId        String   @db.VarChar(255)
  userId        String   @db.VarChar(255)
  date          DateTime
  price         Float
  paymentStatus String
  club          Club     @relation(fields: [clubId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model Review {
  id      String @id @default(cuid())
  clubId  String @db.VarChar(255)
  userId  String @db.VarChar(255)
  rating  Int
  comment String
  club    Club   @relation(fields: [clubId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}
